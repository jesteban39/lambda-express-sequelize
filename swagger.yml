openapi: 3.0.0
info:
  title: lambda-express-sequelize
  description: documentaci√≥n lambda-express-sequelize
  version: 1.0.0
  servers:
    - http://localhost:4000
paths:
  /api/Client:
    get:
      tags:
        - Client
      parameters: []
      requestBody: null
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                example:
                  - uuid: 08e78901-9cb6-4dcb-af06-3b342f2b90a4
                    nombre: cliente nombre
                  - uuid: 16e30d77-d81b-4d8a-a951-555276e92e15
                    nombre: cliente nombre
                  - uuid: 6e29f58a-ae13-4c5e-801c-196b5e82494b
                    nombre: cliente nombre
    post:
      tags:
        - Client
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example: &ref_0
                uuid: c63e0bd3-cbd9-450a-b5dc-9d98c5d5544e
                nombre: cliente nombre
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                example: *ref_0
  /api/Client/{uuid}:
    put:
      tags:
        - Client
      parameters:
        - name: uuid
          in: path
          type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example: &ref_1
                uuid: 08e78901-9cb6-4dcb-af06-3b342f2b90a4
                nombre: cliente nombre
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                example: *ref_1
  /api/Client/filter?nombre={nombre}:
    get:
      tags:
        - Client
      parameters:
        - name: nombre
          in: path
          type: string
          required: false
      requestBody: null
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                example:
                  - uuid: 08e78901-9cb6-4dcb-af06-3b342f2b90a4
                    nombre: cliente nombre
                  - uuid: 16e30d77-d81b-4d8a-a951-555276e92e15
                    nombre: cliente nombre
                  - uuid: 6e29f58a-ae13-4c5e-801c-196b5e82494b
                    nombre: cliente nombre
                  - uuid: c63e0bd3-cbd9-450a-b5dc-9d98c5d5544e
                    nombre: cliente nombre
  /api/User:
    get:
      tags:
        - User
      parameters: []
      requestBody: null
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                example:
                  - uuid: 076870fa-3764-48ed-a833-2e32d6689e6d
                    nombre: usuario nombre
                  - uuid: 60d8431e-78be-434d-b8e0-0bf4f9726bab
                    nombre: usuario nombre
                  - uuid: 8d3dc470-0dd6-4c78-acea-8e0da01e8463
                    nombre: usuario nombre
    post:
      tags:
        - User
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example: &ref_2
                uuid: 893eb666-270f-491d-81d3-49dd9677534b
                nombre: Esteban Quitero
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                example: *ref_2
  /api/User/{uuid}:
    put:
      tags:
        - User
      parameters:
        - name: uuid
          in: path
          type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example: &ref_3
                uuid: 60d8431e-78be-434d-b8e0-0bf4f9726bab
                nombre: Emily Quintero
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                example: *ref_3
  /api/User/filter?nombre={nombre}:
    get:
      tags:
        - User
      parameters:
        - name: nombre
          in: path
          type: string
          required: false
      requestBody: null
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                example:
                  - uuid: 076870fa-3764-48ed-a833-2e32d6689e6d
                    nombre: usuario nombre
                  - uuid: 8d3dc470-0dd6-4c78-acea-8e0da01e8463
                    nombre: usuario nombre
components:
  parameters: {}
  definitions: {}
  schemas:
    usuario:
      type: object
      properties:
        uuid:
          type: string
          required: true
          description: identificador universal unico para la tabal usuario
          example: 893eb666-270f-491d-81d3-49dd9677534b
        nombre:
          type: string
          required: true
          description: nombre de usuario
          example: Esteban Quitero
    cliente:
      type: object
      properties:
        uuid:
          type: string
          required: true
          description: identificador universal unico para la tabal cliente
          example: c63e0bd3-cbd9-450a-b5dc-9d98c5d5544e
        nombre:
          type: string
          required: true
          description: nombre del clinete
          example: cliente nombre
  tags:
    - User
    - Client
